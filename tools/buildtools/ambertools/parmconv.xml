<tool id="parmconv" name="Convert Parameters" version="@VERSION@" >
  <description>- for use with MMPBSA</description>
  <macros>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements">
    <requirement type="package" version="3.2.0">parmed</requirement>
    <requirement type="package" version="2.11.1">jinja2</requirement>
  </expand>
  <command detect_errors="exit_code">
    <![CDATA[
   python '$templating_script' '$inputs' &&
   export AMBERHOME=\$CONDA_PREFIX && 
   parmed -i ligand.script -O &&
   parmed -i receptor.script -O &&
   parmed -i complex.script -O &&
   parmed -i solvatedcomplex.script -O 

      ]]>
  </command>
  <configfiles>
    <inputs name="inputs"/>
    <configfile name="templating_script">
      <![CDATA[

import os
import sys
import json

from jinja2 import Environment, FileSystemLoader

input_json_path = sys.argv[1]
params = json.load(open(input_json_path, "r"))

currentpath = "$__tool_directory__"  # should work generally
template_environment = Environment(loader=FileSystemLoader(currentpath),lstrip_blocks=True, trim_blocks=True)
template = template_environment.get_template('template_parmconv.j2')
print(params)

params['prmtop_in'] =   '$prmtop_in'
params['prmtop_ligand'] =   '$prmtop_ligand'
params['prmtop_receptor'] =  '$prmtop_receptor'
params['prmtop_complex'] =   '$prmtop_complex'
params['prmtop_solvatedcomplex'] = '$prmtop_solvatedcomplex'
print(params)

def run_template(params=params, system="ligand"):
    localparams=params.copy() # shallow copy ok for simple variables
    localparams['stripmask']=localparams['stripmask_'+system]
    localparams['prmtop_out']=localparams['prmtop_'+system]
    print(localparams)
    with open(system+'.script','w+') as f:
        f.write(template.render(localparams))

systems = ['ligand', 'receptor', 'complex', 'solvatedcomplex']
for system in systems:
    run_template(system=system)

]]>
    </configfile>
  </configfiles>
  <inputs>
    <param name="fmt" type="select" display="radio" label="Force Field Parameter format">
      <option selected="True" value="AMBER">AMBER prmtop</option>
      <option value="CHARMM">CHARMM</option>
      <option value="CHARMM">GROMACS top</option>
    </param>
    <param name="prmtop_in" type="data" label="Input Parameter/Topology file" format="txt"/>
    <param name="stripmask_ligand" type="text" label="Stripmask selection to define the ligand" value="!:UNL"></param>
    <param name="stripmask_receptor" type="text" label="Stripmask selection to define the receptor" value=":WAT,SOL,UNL"></param>
    <param name="stripmask_complex" type="text" label="Stripmask selection to define the complex" value=":WAT,SOL"></param>
    <param name="stripmask_solvatedcomplex" type="text" label="Stripmask selection to define solvated complex"></param>

  </inputs>
  <outputs>
    <data format="txt" name="prmtop_ligand" label="ligand prmtop"/>
    <data format="txt" name="prmtop_receptor" label="receptor prmtop"/>
    <data format="txt" name="prmtop_complex" label="complex prmtop"/>
    <data format="txt" name="prmtop_solvatedcomplex" label="solvated complex prmtop"/>
  </outputs>
  <help>
    <![CDATA[
    .. class:: infomark

    **What it does**

    This tool converts a single parameter/topology representing a solvated complex into parameter files for the ligand, receptor, complex and solvated complex in AMBER prmtop format. These files are needed for MMPBSA calculations. 

    .. class:: infomark

    **How it works**

    AmberTools parmed is used to strip unneeded atoms and save out the parameter files. The stripmasks are defined by the user.

    .. class:: infomark

    **Outputs created**

    prmtop files for the ligand, receptor, complex and solvated complex

    .. class:: infomark

    **User guide and documentation**

    - The `AmberTools Manual`_


    .. _`AmberTools Manual`: https://ambermd.org/doc12/Amber18.pdf


    ]]>
  </help>
</tool>
